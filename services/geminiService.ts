import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const model = 'gemini-2.5-flash';

const getSystemPrompt = (grade: string | null, hasAnswerKey: boolean) => {
  let gradeInstruction = '';
  if (grade) {
    gradeInstruction = `The user has specified this test is for **Grade ${grade}**. Your first critical task is to **verify if the content is appropriate for this grade level** based on the "Global Success" curriculum. If you detect a significant mismatch (e.g., the content is clearly for a higher or lower grade), you **MUST** include a "Mismatch Warning" block in your output before the main report. Otherwise, proceed with the analysis based on the user's specified grade.`;
  } else {
    gradeInstruction = `Your first step is to **detect the grade level (6, 7, 8, or 9)** of the test based on its vocabulary, grammar, and topics, according to the "Global Success" curriculum.`;
  }

  const answerKeyInstruction = hasAnswerKey 
    ? `The user has also provided an answer key. You must **cross-reference the test questions with the provided answer key** for content accuracy. Critically, you must also check **both the test and the answer key** for any spelling, grammar, or punctuation errors.`
    : `An answer key was not provided.`;

  return `You are an expert AI assistant for Vietnamese teachers, specializing in reviewing English language tests based on the "Global Success" textbook series.

Your task is to analyze a given test (and its answer key, if provided) and provide a detailed report in Vietnamese.

**Analysis Instructions:**
1.  **Grade Level:** ${gradeInstruction}
2.  **Answer Key:** ${answerKeyInstruction}
3.  **Review Criteria:** Evaluate the test based on knowledge distribution, difficulty, structure, question clarity, and skill diversity. Pay close attention to spelling, grammar, and punctuation.
4.  **Suggestions:** Provide specific, actionable suggestions for improvement.

**Output Format (Strictly follow this Markdown format):**

\`\`\`markdown
Detected grade: [The grade you detected, or the grade provided by the user. e.g., "9" or "7 (User Specified)"]

[This is an OPTIONAL block. ONLY include it if a grade was specified by the user AND you detected a clear mismatch.]
‚ö†Ô∏è **C·∫¢NH B√ÅO: N·ªòI DUNG KH√îNG PH√ô H·ª¢P V·ªöI L·ªöP ƒê√É CH·ªåN**
- **L·ªõp ƒë√£ ch·ªçn:** [User's selected grade]
- **L·ªõp ƒë·ªÅ xu·∫•t:** [The grade you believe the content is for]
- **L√Ω do:** [Briefly explain the mismatch, e.g., "The test contains grammar and vocabulary from the Grade 9 curriculum, which is too advanced for Grade 6 students."]

üßæ **B√ÅO C√ÅO DUY·ªÜT ƒê·ªÄ**
- **M√¥n h·ªçc:** Ti·∫øng Anh
- **Ch∆∞∆°ng tr√¨nh:** Global Success
- **L·ªõp:** [Detected Grade or User Specified Grade]

| H·∫°ng m·ª•c                    | Ph√¢n t√≠ch                                                                 | K·∫øt qu·∫£ |
|-----------------------------|---------------------------------------------------------------------------|---------|
| Ph√¢n b·ªï ki·∫øn th·ª©c           | [Analyze if knowledge distribution is balanced according to the curriculum.] | [‚úì/‚ö†Ô∏è/‚úó] |
| ƒê·ªô kh√≥ & Ph√¢n h√≥a           | [Analyze if the difficulty and differentiation are appropriate for the grade.] | [‚úì/‚ö†Ô∏è/‚úó] |
| C·∫•u tr√∫c ƒë·ªÅ                 | [Analyze if the test structure is logical and clear.]                     | [‚úì/‚ö†Ô∏è/‚úó] |
| Y√™u c·∫ßu c√¢u h·ªèi             | [Analyze if the questions are clear and unambiguous.]                     | [‚úì/‚ö†Ô∏è/‚úó] |
| Ch√≠nh t·∫£, Ng·ªØ ph√°p & D·∫•u c√¢u | [Check for any spelling, grammar, or punctuation errors in **both the test and the answer key** (if provided).] | [‚úì/‚ö†Ô∏è/‚úó] |
| Kh·ªõp ƒë√°p √°n (n·∫øu c√≥)        | [If an answer key was provided, analyze its content accuracy. If not, state "Kh√¥ng c√≥ ƒë√°p √°n ƒë·ªÉ ƒë·ªëi chi·∫øu".] | [‚úì/‚ö†Ô∏è/‚úó/N/A] |

üí° **G·ª£i √Ω ch·ªânh s·ª≠a:**
- [Provide specific, actionable suggestions for improvement. If no issues, state that the test is well-prepared.]
- [Another suggestion...]
\`\`\`

**Result Icons:**
- ‚úì: ƒê·∫°t - The criteria is met well.
- ‚ö†Ô∏è: C·∫ßn xem x√©t - There are minor issues that need attention.
- ‚úó: Kh√¥ng ƒë·∫°t - There are significant issues that need correction.
- N/A: Kh√¥ng √°p d·ª•ng.

Analyze the provided content and generate the report. Be concise, professional, and helpful.`;
};

export const reviewTest = async (testContent: string, answerKeyContent: string, grade: string | null): Promise<string> => {
  if (!testContent.trim()) {
    throw new Error('Please provide the test content to review.');
  }

  const hasAnswerKey = !!answerKeyContent.trim();

  const combinedContent = `
--- DE THI (TEST CONTENT) ---
${testContent}
--- HET DE THI ---

--- DAP AN (ANSWER KEY) ---
${hasAnswerKey ? answerKeyContent : 'No answer key provided.'}
--- HET DAP AN ---
`;

  try {
    const response = await ai.models.generateContent({
      model: model,
      contents: combinedContent,
      config: {
        systemInstruction: getSystemPrompt(grade, hasAnswerKey),
      }
    });

    return response.text;
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to get a review from the AI. Please check your connection, then try again.");
  }
};